{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","rowDict","month","year","week","colDict","useState","age","setAge","submitted","setSubmitted","time","setTime","grid","setGrid","useEffect","console","log","rows","i","push","Array","from","x","y","inputField","className","autoFocus","value","onChange","e","target","onClick","preventDefault","style","fontWeight","MonthGrid","transitionDuration","display","gridTemplateColumns","justifyContent","paddingTop","map","col","k","key","width","height","margin","backgroundColor","undefined","border","borderColor","borderRadius","YearGrid","WeekGrid","gridDict","timeframe","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f0826534.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport FadeIn from \"react-fade-in\";\nimport \"./App.css\";\n\nfunction App() {\n  const rowDict = { month: 27, year: 6, week: 65 };\n  const colDict = { month: 40, year: 15, week: 72 };\n\n  const [age, setAge] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n  const [time, setTime] = useState(\"month\");\n  const [grid, setGrid] = useState([]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setSubmitted(true);\n  };\n  const goHome = (e) => {\n    e.preventDefault();\n    setSubmitted(false);\n  };\n  const changeTime = () => {\n    switch (time) {\n      case \"month\":\n        setTime(\"year\");\n        break;\n      case \"year\":\n        setTime(\"week\");\n        break;\n      case \"week\":\n        setTime(\"month\");\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    console.log(time);\n    setGrid(() => {\n      console.log(`grid with new time ${time}`);\n      const rows = [];\n      for (let i = 0; i < rowDict[time]; i++) {\n        rows.push(\n          Array.from(Array(colDict[time]), (x, y) => y + i * colDict[time])\n        );\n      }\n      return rows;\n    });\n  }, [time]);\n\n  const inputField = (\n    <>\n      <input\n        className=\"field\"\n        autoFocus={true}\n        value={age ? age : \"\"}\n        onChange={(e) => setAge(e.target.value)}\n      />\n      <button\n        className=\"btn\"\n        onClick={handleSubmit}\n        style={{ fontWeight: 700 }}\n      >\n        visualize\n      </button>\n    </>\n  );\n\n  const MonthGrid = () => {\n    console.log(\"renders \" + time);\n    return (\n      <FadeIn transitionDuration={2000}>\n        <div\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${colDict[time]}, 28px)`,\n            justifyContent: \"center\",\n            paddingTop: \"20px\",\n          }}\n        >\n          {grid.map((rows, i) =>\n            rows.map((col, k) => (\n              <div\n                key={`${i}-${k}`}\n                style={{\n                  width: 20,\n                  height: 20,\n                  margin: 3,\n                  backgroundColor: grid[i][k] < age * 12 ? \"white\" : undefined,\n                  border: \"solid 1px\",\n                  borderColor: `rgba(255, 255, 255, ${1 - i / 27})`,\n                  borderRadius: 20,\n                }}\n              />\n            ))\n          )}\n        </div>\n      </FadeIn>\n    );\n  };\n\n  const YearGrid = () => {\n    console.log(\"renders \" + time);\n    return (\n      <FadeIn transitionDuration={2000}>\n        <div\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${colDict[time]}, 81px)`,\n            justifyContent: \"center\",\n            paddingTop: \"20px\",\n          }}\n        >\n          {grid.map((rows, i) =>\n            rows.map((col, k) => (\n              <div\n                key={`${i}-${k}`}\n                style={{\n                  width: 60,\n                  height: 60,\n                  margin: 10,\n                  backgroundColor: grid[i][k] < age ? \"white\" : undefined,\n                  border: \"solid 1px\",\n                  borderColor: `rgba(255, 255, 255, ${1 - i / 6})`,\n                  borderRadius: 10,\n                }}\n              />\n            ))\n          )}\n        </div>\n      </FadeIn>\n    );\n  };\n\n  const WeekGrid = () => {\n    console.log(\"renders \" + time);\n    return (\n      <FadeIn transitionDuration={3000}>\n        <div\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${colDict[time]}, 14px)`,\n            justifyContent: \"center\",\n            paddingTop: \"20px\",\n          }}\n        >\n          {grid.map((rows, i) =>\n            rows.map((col, k) => (\n              <div\n                key={`${i}-${k}`}\n                style={{\n                  width: 8,\n                  height: 8,\n                  margin: 2,\n                  backgroundColor: grid[i][k] < age * 52 ? \"white\" : undefined,\n                  border: `solid 0.1px rgba(255, 255, 255, ${1 - i / 65})`,\n                  borderRadius: 8,\n                }}\n              />\n            ))\n          )}\n        </div>\n      </FadeIn>\n    );\n  };\n\n  const gridDict = {\n    month: <MonthGrid />,\n    year: <YearGrid />,\n    week: <WeekGrid />,\n  };\n\n  const timeframe = (\n    <button className=\"btn\" onClick={changeTime} style={{ fontWeight: 700 }}>\n      {time}s\n    </button>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {submitted ? <> your life in{timeframe}</> : \"enter your age:\"}\n      </header>\n      <>{submitted ? gridDict[time] : inputField}</>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}